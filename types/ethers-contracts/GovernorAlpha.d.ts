/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernorAlphaInterface extends ethers.utils.Interface {
  functions: {
    "BALLOT_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "guardian()": FunctionFragment;
    "kaleido()": FunctionFragment;
    "latestProposalIds(address)": FunctionFragment;
    "name()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "timelock()": FunctionFragment;
    "quorumVotes()": FunctionFragment;
    "proposalThreshold()": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
    "propose(address[],uint256[],string[],bytes[],string)": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "__acceptAdmin()": FunctionFragment;
    "__abdicate()": FunctionFragment;
    "__queueSetTimelockPendingAdmin(address,uint256)": FunctionFragment;
    "__executeSetTimelockPendingAdmin(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(functionFragment: "kaleido", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BigNumberish[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "__acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__abdicate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__queueSetTimelockPendingAdmin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__executeSetTimelockPendingAdmin",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kaleido", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__abdicate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__queueSetTimelockPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__executeSetTimelockPendingAdmin",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalQueued(uint256,uint256)": EventFragment;
    "VoteCast(address,uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export class GovernorAlpha extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernorAlphaInterface;

  functions: {
    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    BALLOT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The address of the Governor Guardian
     */
    guardian(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The address of the Governor Guardian
     */
    "guardian()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The address of the Kaleido governance token
     */
    kaleido(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The address of the Kaleido governance token
     */
    "kaleido()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The latest proposal for each proposer
     */
    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The latest proposal for each proposer
     */
    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The name of this contract
     */
    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The name of this contract
     */
    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The total number of proposals
     */
    proposalCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The total number of proposals
     */
    "proposalCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The official record of all proposals ever proposed
     */
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    /**
     * The official record of all proposals ever proposed
     */
    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    /**
     * The address of the Kaleido Protocol Timelock
     */
    timelock(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The address of the Kaleido Protocol Timelock
     */
    "timelock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    quorumVotes(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    "quorumVotes()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    proposalThreshold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    "proposalThreshold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    votingDelay(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    "votingDelay()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    votingPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    "votingPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __acceptAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "__acceptAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    __abdicate(overrides?: Overrides): Promise<ContractTransaction>;

    "__abdicate()"(overrides?: Overrides): Promise<ContractTransaction>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * The EIP-712 typehash for the ballot struct used by the contract
   */
  BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  /**
   * The EIP-712 typehash for the ballot struct used by the contract
   */
  "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  /**
   * The EIP-712 typehash for the contract's domain
   */
  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  /**
   * The EIP-712 typehash for the contract's domain
   */
  "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  /**
   * The address of the Governor Guardian
   */
  guardian(overrides?: CallOverrides): Promise<string>;

  /**
   * The address of the Governor Guardian
   */
  "guardian()"(overrides?: CallOverrides): Promise<string>;

  /**
   * The address of the Kaleido governance token
   */
  kaleido(overrides?: CallOverrides): Promise<string>;

  /**
   * The address of the Kaleido governance token
   */
  "kaleido()"(overrides?: CallOverrides): Promise<string>;

  /**
   * The latest proposal for each proposer
   */
  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * The latest proposal for each proposer
   */
  "latestProposalIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * The name of this contract
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * The name of this contract
   */
  "name()"(overrides?: CallOverrides): Promise<string>;

  /**
   * The total number of proposals
   */
  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The total number of proposals
   */
  "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The official record of all proposals ever proposed
   */
  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    eta: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
    8: boolean;
  }>;

  /**
   * The official record of all proposals ever proposed
   */
  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    eta: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
    8: boolean;
  }>;

  /**
   * The address of the Kaleido Protocol Timelock
   */
  timelock(overrides?: CallOverrides): Promise<string>;

  /**
   * The address of the Kaleido Protocol Timelock
   */
  "timelock()"(overrides?: CallOverrides): Promise<string>;

  /**
   * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
   */
  quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
   */
  "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The number of votes required in order for a voter to become a proposer
   */
  proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The number of votes required in order for a voter to become a proposer
   */
  "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The maximum number of actions that can be included in a proposal
   */
  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The maximum number of actions that can be included in a proposal
   */
  "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The delay before voting on a proposal may take place, once proposed
   */
  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The delay before voting on a proposal may take place, once proposed
   */
  "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The duration of voting on a proposal, in blocks
   */
  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The duration of voting on a proposal, in blocks
   */
  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  propose(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "propose(address[],uint256[],string[],bytes[],string)"(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queue(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queue(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    proposalId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancel(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: BigNumber[];
    2: string[];
    3: string[];
  }>;

  "getActions(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: BigNumber[];
    2: string[];
    3: string[];
  }>;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  "getReceipt(uint256,address)"(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVote(uint256,bool)"(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  castVoteBySig(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __acceptAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "__acceptAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  __abdicate(overrides?: Overrides): Promise<ContractTransaction>;

  "__abdicate()"(overrides?: Overrides): Promise<ContractTransaction>;

  __queueSetTimelockPendingAdmin(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__queueSetTimelockPendingAdmin(address,uint256)"(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __executeSetTimelockPendingAdmin(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__executeSetTimelockPendingAdmin(address,uint256)"(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    /**
     * The address of the Governor Guardian
     */
    guardian(overrides?: CallOverrides): Promise<string>;

    /**
     * The address of the Governor Guardian
     */
    "guardian()"(overrides?: CallOverrides): Promise<string>;

    /**
     * The address of the Kaleido governance token
     */
    kaleido(overrides?: CallOverrides): Promise<string>;

    /**
     * The address of the Kaleido governance token
     */
    "kaleido()"(overrides?: CallOverrides): Promise<string>;

    /**
     * The latest proposal for each proposer
     */
    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The latest proposal for each proposer
     */
    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The name of this contract
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * The name of this contract
     */
    "name()"(overrides?: CallOverrides): Promise<string>;

    /**
     * The total number of proposals
     */
    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The total number of proposals
     */
    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The official record of all proposals ever proposed
     */
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    /**
     * The official record of all proposals ever proposed
     */
    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    /**
     * The address of the Kaleido Protocol Timelock
     */
    timelock(overrides?: CallOverrides): Promise<string>;

    /**
     * The address of the Kaleido Protocol Timelock
     */
    "timelock()"(overrides?: CallOverrides): Promise<string>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    __acceptAdmin(overrides?: CallOverrides): Promise<void>;

    "__acceptAdmin()"(overrides?: CallOverrides): Promise<void>;

    __abdicate(overrides?: CallOverrides): Promise<void>;

    "__abdicate()"(overrides?: CallOverrides): Promise<void>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ProposalCanceled(id: null): EventFilter;

    ProposalCreated(
      id: null,
      proposer: null,
      targets: null,
      values: null,
      signatures: null,
      calldatas: null,
      startBlock: null,
      endBlock: null,
      description: null
    ): EventFilter;

    ProposalExecuted(id: null): EventFilter;

    ProposalQueued(id: null, eta: null): EventFilter;

    VoteCast(
      voter: null,
      proposalId: null,
      support: null,
      votes: null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The address of the Governor Guardian
     */
    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The address of the Governor Guardian
     */
    "guardian()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The address of the Kaleido governance token
     */
    kaleido(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The address of the Kaleido governance token
     */
    "kaleido()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The latest proposal for each proposer
     */
    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The latest proposal for each proposer
     */
    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The name of this contract
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The name of this contract
     */
    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The total number of proposals
     */
    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The total number of proposals
     */
    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The official record of all proposals ever proposed
     */
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The official record of all proposals ever proposed
     */
    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The address of the Kaleido Protocol Timelock
     */
    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The address of the Kaleido Protocol Timelock
     */
    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancel(proposalId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __acceptAdmin(overrides?: Overrides): Promise<BigNumber>;

    "__acceptAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    __abdicate(overrides?: Overrides): Promise<BigNumber>;

    "__abdicate()"(overrides?: Overrides): Promise<BigNumber>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The address of the Governor Guardian
     */
    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The address of the Governor Guardian
     */
    "guardian()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The address of the Kaleido governance token
     */
    kaleido(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The address of the Kaleido governance token
     */
    "kaleido()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The latest proposal for each proposer
     */
    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The latest proposal for each proposer
     */
    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The name of this contract
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The name of this contract
     */
    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The total number of proposals
     */
    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The total number of proposals
     */
    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The official record of all proposals ever proposed
     */
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The official record of all proposals ever proposed
     */
    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The address of the Kaleido Protocol Timelock
     */
    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The address of the Kaleido Protocol Timelock
     */
    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    quorumVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    "quorumVotes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    proposalThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    "proposalThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    "votingDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __acceptAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "__acceptAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    __abdicate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "__abdicate()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
