/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { Contract, ContractOptions, EventOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, ContractEvent, TransactionObject } from "./types";

export class GovernorAlpha extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): GovernorAlpha;
  methods: {
    BALLOT_TYPEHASH(): TransactionObject<string>;

    DOMAIN_TYPEHASH(): TransactionObject<string>;

    guardian(): TransactionObject<string>;

    kaleido(): TransactionObject<string>;

    latestProposalIds(arg0: string): TransactionObject<BN>;

    name(): TransactionObject<string>;

    proposalCount(): TransactionObject<BN>;

    proposals(
      arg0: number | string
    ): TransactionObject<{
      id: BN;
      proposer: string;
      eta: BN;
      startBlock: BN;
      endBlock: BN;
      forVotes: BN;
      againstVotes: BN;
      canceled: boolean;
      executed: boolean;
      0: BN;
      1: string;
      2: BN;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: boolean;
      8: boolean;
    }>;

    timelock(): TransactionObject<string>;

    quorumVotes(): TransactionObject<BN>;

    proposalThreshold(): TransactionObject<BN>;

    proposalMaxOperations(): TransactionObject<BN>;

    votingDelay(): TransactionObject<BN>;

    votingPeriod(): TransactionObject<BN>;

    propose(
      targets: string[],
      values: (number | string)[],
      signatures: string[],
      calldatas: (string | number[])[],
      description: string
    ): TransactionObject<BN>;

    queue(proposalId: number | string): TransactionObject<void>;

    execute(proposalId: number | string): TransactionObject<void>;

    cancel(proposalId: number | string): TransactionObject<void>;

    getActions(
      proposalId: number | string
    ): TransactionObject<{
      targets: string[];
      values: BN[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BN[];
      2: string[];
      3: string[];
    }>;

    getReceipt(
      proposalId: number | string,
      voter: string
    ): TransactionObject<{ hasVoted: boolean; support: boolean; votes: BN }>;

    state(proposalId: number | string): TransactionObject<BN>;

    castVote(
      proposalId: number | string,
      support: boolean
    ): TransactionObject<void>;

    castVoteBySig(
      proposalId: number | string,
      support: boolean,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>;

    __acceptAdmin(): TransactionObject<void>;

    __abdicate(): TransactionObject<void>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: number | string
    ): TransactionObject<void>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: number | string
    ): TransactionObject<void>;
  };
  events: {
    ProposalCanceled: ContractEvent<BN>;
    ProposalCreated: ContractEvent<{
      id: BN;
      proposer: string;
      targets: string[];
      values: BN[];
      signatures: string[];
      calldatas: string[];
      startBlock: BN;
      endBlock: BN;
      description: string;
      0: BN;
      1: string;
      2: string[];
      3: BN[];
      4: string[];
      5: string[];
      6: BN;
      7: BN;
      8: string;
    }>;
    ProposalExecuted: ContractEvent<BN>;
    ProposalQueued: ContractEvent<{
      id: BN;
      eta: BN;
      0: BN;
      1: BN;
    }>;
    VoteCast: ContractEvent<{
      voter: string;
      proposalId: BN;
      support: boolean;
      votes: BN;
      0: string;
      1: BN;
      2: boolean;
      3: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
