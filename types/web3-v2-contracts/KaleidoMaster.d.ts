/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { Contract, ContractOptions, EventOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, ContractEvent, TransactionObject } from "./types";

export class KaleidoMaster extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): KaleidoMaster;
  methods: {
    BONUS_MULTIPLIER(): TransactionObject<BN>;

    bonusEndBlock(): TransactionObject<BN>;

    devaddr(): TransactionObject<string>;

    kaleido(): TransactionObject<string>;

    kaleidoPerBlock(): TransactionObject<BN>;

    migrator(): TransactionObject<string>;

    owner(): TransactionObject<string>;

    poolInfo(
      arg0: number | string
    ): TransactionObject<{
      lpToken: string;
      allocPoint: BN;
      lastRewardBlock: BN;
      accKaleidoPerShare: BN;
      0: string;
      1: BN;
      2: BN;
      3: BN;
    }>;

    renounceOwnership(): TransactionObject<void>;

    startBlock(): TransactionObject<BN>;

    totalAllocPoint(): TransactionObject<BN>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    userInfo(
      arg0: number | string,
      arg1: string
    ): TransactionObject<{
      amount: BN;
      rewardDebt: BN;
      0: BN;
      1: BN;
    }>;

    poolLength(): TransactionObject<BN>;

    add(
      _allocPoint: number | string,
      _lpToken: string,
      _withUpdate: boolean
    ): TransactionObject<void>;

    set(
      _pid: number | string,
      _allocPoint: number | string,
      _withUpdate: boolean
    ): TransactionObject<void>;

    setMigrator(_migrator: string): TransactionObject<void>;

    migrate(_pid: number | string): TransactionObject<void>;

    getMultiplier(
      _from: number | string,
      _to: number | string
    ): TransactionObject<BN>;

    pendingKaleido(_pid: number | string, _user: string): TransactionObject<BN>;

    massUpdatePools(): TransactionObject<void>;

    updatePool(_pid: number | string): TransactionObject<void>;

    deposit(
      _pid: number | string,
      _amount: number | string
    ): TransactionObject<void>;

    withdraw(
      _pid: number | string,
      _amount: number | string
    ): TransactionObject<void>;

    emergencyWithdraw(_pid: number | string): TransactionObject<void>;

    dev(_devaddr: string): TransactionObject<void>;
  };
  events: {
    Deposit: ContractEvent<{
      user: string;
      pid: BN;
      amount: BN;
      0: string;
      1: BN;
      2: BN;
    }>;
    EmergencyWithdraw: ContractEvent<{
      user: string;
      pid: BN;
      amount: BN;
      0: string;
      1: BN;
      2: BN;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    Withdraw: ContractEvent<{
      user: string;
      pid: BN;
      amount: BN;
      0: string;
      1: BN;
      2: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
